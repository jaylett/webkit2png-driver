#!/usr/bin/env perl

use Modern::Perl;
use Config::Std;
use File::Copy;
use File::Path;
use Getopt::Long;
use IO::All         -utf8;
use Pod::Usage;
use Template::Jigsaw;

my %base_config = (
        delay           => 0,
        make_clipped    => 1,
        make_fullsize   => 1,
        make_thumb      => 1,
        clipwidth       => 250,
        clipheight      => 300,
        width           => 1024,
    );

my %option;
GetOptions(
        \%option,
        'help|h',
        'archive|a=s',
        'generate-indexes|i',
        'config|c=s',
    );

pod2usage() if $option{'help'};

my $conf_file     = $option{'config'} // 'grabs.ini';
my %config        = get_configuration( $conf_file );
my $current_login = '';
my $generator     = get_template_generator();
my $grabs_title   = get_title();
my @pages;

$| = 1;



if ( $option{'generate-indexes'} || $option{'archive'} ) {
    foreach my $section ( keys %config ) {
        # skip anything that is not a screen grab
        next if $section =~ m{\#};
        next if $section eq '';
        
        push @pages, $section;
    }
    
    archive_files()
        if $option{'archive'};
    generate_indexes()
}
else {
    # performing screengrabs is the default option
    if ( $#ARGV > -1 ) {
        foreach my $page ( @ARGV ) {
            foreach my $section ( keys %config ) {
                push( @pages, $section )
                    if $section =~ m{$page};
            }
        }
    }
    else {
        foreach my $section ( keys %config ) {
            # skip anything that is not a screen grab
            next if $section =~ m{\#};
            next if $section eq '';
            
            push @pages, $section;
        }
    }
    
    my $total = scalar @pages;
    my @sections = get_sections_in_order( @pages );
    
    logout()
        if $config{''}{'loggedout'};
    
    foreach my $section ( @sections ) {
        state $count = 0;
        $count++;
        
        screengrab( $section, $count, $total );
    }
}
exit;



sub archive_files {
    my $signature = $option{'archive'};
    
    foreach my $section ( @pages ) {
        foreach my $suffix ( 'full', 'thumb', 'clipped' ) {
            my $source = "${section}/latest-${suffix}.png";
            my $target = "${section}/${signature}-${suffix}.png";
            
            copy($source, $target)
                if -f $source;
        }
    }
    write_latest_commit( $signature );
}
sub generate_indexes {
    my $grabs  = find_all_screengrabs();
    my $latest = read_latest_commit();
    
    generate_from_template(
        'index',
        'index.html',
        {
            commit        => 'latest',
            grabs         => $grabs,
            latest_commit => $latest,
            title         => $grabs_title,
        }
    );
    
    foreach my $commit ( keys %{ $grabs->{'commit'} } ) {
        next unless $commit;
        
        mkpath $commit;
        generate_from_template(
            'commit',
            "${commit}/index.html",
            {
                commit        => $commit,
                grabs         => $grabs,
                latest_commit => $latest,
                title         => $grabs_title,
            }
        );
    }
    
    foreach my $section ( keys %{ $grabs->{'section'} } ) {
        generate_from_template(
            'section',
            "${section}/index.html",
            {
                grabs         => $grabs,
                latest_commit => $latest,
                section       => $section,
                title         => $grabs_title,
            }
        );
    }
}
sub find_all_screengrabs {
    my %grabs = (
            'section' => {},
            'commit'  => {},
        );
    
    foreach my $section ( @pages ) {
        $grabs{'section'}{$section} = {};
        
        opendir my $dir, $section
            or die "Cannot open directory $section: $!";
        
        while ( my $file = readdir $dir ) {
            if ( $file =~ m{^ (.+)-(?: full|clipped|thumb)\.png $}x ) {
                $grabs{'section'}{$section}{$file} = 1;
                $grabs{'commit'}{$1}{$section} = 1;
            }
        }
    }
    
    return \%grabs;
}
sub read_latest_commit {
    my $commit < io('latest.txt');
    chomp $commit;
    
    return $commit;
}
sub write_latest_commit {
    my $commit = shift;
    $commit > io('latest.txt');
}
sub generate_from_template {
    my $template = shift;
    my $target   = shift;
    my $data     = shift;
    
    my( $output, $errors ) = $generator->render(
            '/',
            'html',
            { type => $template },
            $data
        );
    
    say STDERR $errors
        if $errors;
    
    $output > io($target);
}
sub login {
    my $login   = shift;
    my $section = "user#${login}";
    
    print " -- logging in as $login\r";
    
    my $username_field = $config{'form#login'}{'username'};
    my $username       = $config{$section}{'username'};
    my $password_field = $config{'form#login'}{'password'};
    my $password       = $config{$section}{'password'};
    my $submit_button  = $config{'form#login'}{'submit'};
    my $javascript     = <<END;
        jQuery("${username_field}").val("${username}");
        jQuery("${password_field}").val("${password}");
        jQuery("${submit_button}").trigger('click');
END
    
    discarded_screengrab(
        get_full_url_for('form#login'),
        $javascript,
    );
    
    $current_login = $login;
}
sub logout {
    my $logout_button = $config{'form#logout'}{'submit'};
    my $javascript    = <<END;
        jQuery("${logout_button}").trigger('click');
END
    
    print " -- logging out\r";
    
    discarded_screengrab(
        get_full_url_for('form#logout'),
        $javascript,
    );
    
    $current_login = '';
}
sub screengrab {
    my $section = shift;
    my $count   = shift;
    my $total   = shift;
    
    my $url = get_full_url_for( $section );
    return unless $url;
    
    my @args  = get_args_for( $section );
    my $login = get_key($section, 'login') // '';
    if ( $login ne $current_login ) {
        if ( !$login ) {
            logout();
        }
        else {
            login($login);
        }
    }
    
    state $places = length( sprintf "%s", $total );
    printf
        "[%0${places}d/%0${places}d] %-40s\n%s",
            $count, 
            $total,
            $section,
            ( ' ' x ($places*2 + 4 ) );
    
    system( 'webkit2png', @args, $url );
    
    logout()
        if get_key($section, 'logout');
}
sub discarded_screengrab {
    my $url        = shift;
    my $javascript = shift;
    
    system(
        'webkit2png',
        '-q',
        '--js',
        $javascript,
        '--dir',
        '/tmp',
        '--file',
        'webkit2png-driver',
        '--delay',
        '5',
        $url,
    );
}
sub get_full_url_for {
    my $section = shift;
    
    my $url = $config{$section}{'url'};
    
    $url = sprintf( '%s%s', $config{''}{'base'}, $url )
        if $url !~ m{^https?://};
    
    return $url;
}
sub get_args_for {
    my $section = shift;
    my @args;
    
    my $width      = get_key($section, 'width');
    my $clipwidth  = get_key($section, 'clipwidth');
    my $clipheight = get_key($section, 'clipheight');
    my $scale      = sprintf "%0.5f", $clipwidth / $width;
    mkpath $section;
    
    push @args,
        '--width',      $width,
        '--clipwidth',  $clipwidth,
        '--clipheight', $clipheight,
        '--scale',      $scale,
        '--dir',        $section,
        '--filename',   'latest',
        '--delay',      get_key($section, 'delay');
    
    push( @args, '--thumb' )
        if get_key($section, 'make_thumb');
    push( @args, '--clipped' )
        if get_key($section, 'make_clipped');
    push( @args, '--fullsize' )
        if get_key($section, 'make_fullsize');
    
    push( @args, '--nojs' )
        if get_key($section, 'nojs');
    push( @args, '--noimages' )
        if get_key($section, 'noimages');
    
    my $javascript = get_key($section, 'js');
    my $click = get_key($section, 'click');
    if ( !defined $javascript && defined $click ) {
        $javascript = qq(jQuery('${click}').trigger('click'););
    }
    
    my $timeout = get_key($section, 'timeout');
    if ( defined $javascript && defined $timeout ) {
        $javascript = "setTimeout( function() { ${javascript}; }, $timeout );"
    }
    
    my $fill_name = get_key($section, 'fill_name');
    if ( defined $fill_name ) {
        my $name = generate_random_name();
        $javascript .= qq(jQuery('${fill_name}').val("$name"););
    }
    my $fill_pass = get_key($section, 'fill_pass');
    if ( defined $fill_name ) {
        my $pass = generate_random_password();
        $javascript .= qq(jQuery('${fill_pass}').val("$pass"););
    }
    my $fill_email = get_key($section, 'fill_email');
    if ( defined $fill_email ) {
        my $email = generate_random_email();
        $javascript .= qq(jQuery('${fill_email}').val("$email"););
    }
    my $submit = get_key($section, 'submit');
    if ( defined $submit ) {
        $javascript .= qq(jQuery('${submit}').trigger('click'););
    }
    
    push( @args, '--js', $javascript )
        if defined $javascript;
    
    return @args;
}
sub get_key {
    my $section = shift;
    my $key     = shift;
    
    return $config{$section}{$key} // $config{''}{$key};
}
sub get_title {
    return get_key('', 'title') // get_key('', 'base');
}
sub get_configuration {
    my $file = shift;
    
    read_config $file => my %config;
    
    foreach my $key ( keys %base_config ) {
        $config{''}{$key} = $base_config{$key}
            unless defined $config{''}{$key};
    }
    
    return %config;
}
sub get_sections_in_order {
    my @pages = @_;
    
    # sort into logged out and logged in, alphabetically
    my %sections = map { $_ => 1 } @pages;
    my @chained_sections;
    
    # pull out anything chained
    foreach my $page ( @pages ) {
        my $chain_after = get_key($page, 'chain_after');
        
        if ( defined $chain_after ) {
            if ( defined $sections{$chain_after} ) {
                delete $sections{$chain_after};
                push @chained_sections, $chain_after;
            }
            
            delete $sections{$page};
            push @chained_sections, $page;
        }
    }
    
    return(
         sort( by_name_and_state keys %sections ),
         @chained_sections,
    );
}
sub by_name_and_state {
    my $a_login = $config{$a}{'login'};
    my $b_login = $config{$b}{'login'};
    
    if ( defined $a_login && defined $b_login ) {
        return $a cmp $b
            if $a_login eq $b_login;
        return $a_login cmp $b_login;
    }
    
    return  1
        if defined $a_login && !defined $b_login;
    return -1
        if defined $b_login && !defined $a_login;
    
    return $a cmp $b;
}
sub get_template_generator {
    my $jigsaw = Template::Jigsaw->new();
    
    $jigsaw->set_repository( '_templates' );
    $jigsaw->scan_repository();
    $jigsaw->set_dimensions({ _ => 'type' });
    
    return $jigsaw;
}
sub generate_random_name {
    return sprintf
            'John %s Doe',
                ucfirst generate_random_string();
}
sub generate_random_password {
    return generate_random_string();
}
sub generate_random_email {
    return generate_random_string() . '@mailinator.com';
}
sub generate_random_string {
    my $string = '';
    state $first_letter = ord 'a';
    
    foreach my $i ( 1 .. 12 ) {
        my $letter = int rand 26;
        $string .= chr( $letter + $first_letter );
    }
    
    return $string;
}

__END__

=head1 NAME

B<webkit2png-driver> - automating screengrabs

=head1 SYNOPSIS

B<webkit2png-driver> [-c config] [ [<section>|<regexp>] ... ]

B<webkit2png-driver> [-c config] -i

B<webkit2png-driver> [-c config] -a <archive-name>

=head1 MORE INFORMATION

Original documentation can be found in the F<README.markdown> file
provided in the git repo
L<https://github.com/norm/webkit2png-driver/blob/master/README.markdown>.

=head1 AUTHOR

Mark Norman Francis, L<norm@cackhanded.net>.

=head1 COPYRIGHT AND LICENSE

Copyright 2011 Mark Norman Francis.

This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
